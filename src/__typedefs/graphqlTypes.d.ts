/* tslint:disable */
/* eslint-disable */
import { GraphQLResolveInfo } from 'graphql';
/**
 * This file is auto-generated by graphql-schema-typescript
 * Please note that any changes in this file may be overwritten
 */
 

export { };

declare global {
  namespace GQL {
    /*******************************
     *                             *
     *          TYPE DEFS          *
     *                             *
     *******************************/
    export interface Query {
      _empty?: string;
      
      /**
       *  get all games
       */
      getGames?: Array<Game | null>;
      
      /**
       *  get game by ID 
       */
      game?: Game;
      
      /**
       *  login as a user 
       */
      loginUser?: User;
      
      /**
       *  get a user's public data
       */
      getUser?: PublicUser;
    }
    
    export interface Game {
      id?: string;
      player1Id?: string;
      player2Id?: string;
      nextTurnPlayerId?: string;
      winnerId?: string;
      Player1?: PublicUser;
      Player2?: PublicUser;
      NextTurnPlayer?: PublicUser;
      Winner?: PublicUser;
      status?: GameStatus;
      type?: GameType;
      Moves?: Array<Move | null>;
      player1Fields?: Array<number | null>;
      player2Fields?: Array<number | null>;
      emptyFields?: Array<number | null>;
      timestamp?: string;
    }
    
    /**
     *  a type defining a user's public data 
     */
    export interface PublicUser {
      id?: string;
      name?: string;
      email?: string;
      type?: UserType;
    }
    
    export const enum UserType {
      REAL = 'REAL',
      COMPUTER = 'COMPUTER'
    }
    
    export const enum GameStatus {
      NOTSTARTED = 'NOTSTARTED',
      INPLAY = 'INPLAY',
      FINISHED_TIE = 'FINISHED_TIE',
      FINISHED_WIN = 'FINISHED_WIN'
    }
    
    export const enum GameType {
      SINGLEPLAYER = 'SINGLEPLAYER',
      MULTIPLAYER = 'MULTIPLAYER'
    }
    
    export interface Move {
      id?: string;
      gameId?: string;
      playerId?: string;
      field?: number;
      Player?: PublicUser;
      timestamp?: string;
    }
    
    /**
     *  used for logging in 
     */
    export interface InputLogin {
      email: string;
      password: string;
    }
    
    /**
     *  a type defining a user  
     */
    export interface User {
      id?: string;
      name?: string;
      email?: string;
      token?: string;
      type?: UserType;
    }
    
    export interface Mutation {
      _empty?: string;
      
      /**
       *  create a new game 
       */
      createGame?: Game;
      
      /**
       *  join game
       */
      joinGame?: Game;
      
      /**
       *  register a new user 
       */
      registerUser?: User;
      
      /**
       *  create a new post 
       */
      makeMove?: Array<Move | null>;
    }
    
    /**
     *  input to create a new game 
     */
    export interface InputCreateGame {
      gameType?: GameType;
      player1Id?: string;
    }
    
    /**
     *  input to join game 
     */
    export interface InputJoinGame {
      gameId?: string;
      player2Id?: string;
    }
    
    /**
     *  used for creating a new user 
     */
    export interface InputRegisterUser {
      name: string;
      email: string;
      password: string;
    }
    
    /**
     *  input to create a move 
     */
    export interface InputMakeMove {
      gameId?: string;
      playerId?: string;
      field?: number;
    }
    
    export interface Subscription {
      _empty?: string;
      
      /**
       *  called when a move is made 
       */
      liveResult?: Game;
    }
    
    export interface GameResult {
      id?: string;
      player1Id?: string;
      player2Id?: string;
      status?: GameStatus;
      player1Fields?: Array<number | null>;
      player2Fields?: Array<number | null>;
      emptyFields?: Array<number | null>;
    }
    
    /*********************************
     *                               *
     *         TYPE RESOLVERS        *
     *                               *
     *********************************/
    /**
     * This interface define the shape of your resolver
     * Note that this type is designed to be compatible with graphql-tools resolvers
     * However, you can still use other generated interfaces to make your resolver type-safed
     */
    export interface Resolver {
      Query?: QueryTypeResolver;
      Game?: GameTypeResolver;
      PublicUser?: PublicUserTypeResolver;
      Move?: MoveTypeResolver;
      User?: UserTypeResolver;
      Mutation?: MutationTypeResolver;
      Subscription?: SubscriptionTypeResolver;
      GameResult?: GameResultTypeResolver;
    }
    export interface QueryTypeResolver<TParent = any> {
      _empty?: QueryTo_emptyResolver<TParent>;
      getGames?: QueryToGetGamesResolver<TParent>;
      game?: QueryToGameResolver<TParent>;
      loginUser?: QueryToLoginUserResolver<TParent>;
      getUser?: QueryToGetUserResolver<TParent>;
    }
    
    export interface QueryTo_emptyResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface QueryToGetGamesResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface QueryToGameArgs {
      id: string;
    }
    export interface QueryToGameResolver<TParent = any, TResult = any> {
      (parent: TParent, args: QueryToGameArgs, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface QueryToLoginUserArgs {
      input: InputLogin;
    }
    export interface QueryToLoginUserResolver<TParent = any, TResult = any> {
      (parent: TParent, args: QueryToLoginUserArgs, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface QueryToGetUserArgs {
      id: string;
    }
    export interface QueryToGetUserResolver<TParent = any, TResult = any> {
      (parent: TParent, args: QueryToGetUserArgs, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface GameTypeResolver<TParent = any> {
      id?: GameToIdResolver<TParent>;
      player1Id?: GameToPlayer1IdResolver<TParent>;
      player2Id?: GameToPlayer2IdResolver<TParent>;
      nextTurnPlayerId?: GameToNextTurnPlayerIdResolver<TParent>;
      winnerId?: GameToWinnerIdResolver<TParent>;
      Player1?: GameToPlayer1Resolver<TParent>;
      Player2?: GameToPlayer2Resolver<TParent>;
      NextTurnPlayer?: GameToNextTurnPlayerResolver<TParent>;
      Winner?: GameToWinnerResolver<TParent>;
      status?: GameToStatusResolver<TParent>;
      type?: GameToTypeResolver<TParent>;
      Moves?: GameToMovesResolver<TParent>;
      player1Fields?: GameToPlayer1FieldsResolver<TParent>;
      player2Fields?: GameToPlayer2FieldsResolver<TParent>;
      emptyFields?: GameToEmptyFieldsResolver<TParent>;
      timestamp?: GameToTimestampResolver<TParent>;
    }
    
    export interface GameToIdResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface GameToPlayer1IdResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface GameToPlayer2IdResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface GameToNextTurnPlayerIdResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface GameToWinnerIdResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface GameToPlayer1Resolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface GameToPlayer2Resolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface GameToNextTurnPlayerResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface GameToWinnerResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface GameToStatusResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface GameToTypeResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface GameToMovesResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface GameToPlayer1FieldsResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface GameToPlayer2FieldsResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface GameToEmptyFieldsResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface GameToTimestampResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface PublicUserTypeResolver<TParent = any> {
      id?: PublicUserToIdResolver<TParent>;
      name?: PublicUserToNameResolver<TParent>;
      email?: PublicUserToEmailResolver<TParent>;
      type?: PublicUserToTypeResolver<TParent>;
    }
    
    export interface PublicUserToIdResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface PublicUserToNameResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface PublicUserToEmailResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface PublicUserToTypeResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface MoveTypeResolver<TParent = any> {
      id?: MoveToIdResolver<TParent>;
      gameId?: MoveToGameIdResolver<TParent>;
      playerId?: MoveToPlayerIdResolver<TParent>;
      field?: MoveToFieldResolver<TParent>;
      Player?: MoveToPlayerResolver<TParent>;
      timestamp?: MoveToTimestampResolver<TParent>;
    }
    
    export interface MoveToIdResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface MoveToGameIdResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface MoveToPlayerIdResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface MoveToFieldResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface MoveToPlayerResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface MoveToTimestampResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface UserTypeResolver<TParent = any> {
      id?: UserToIdResolver<TParent>;
      name?: UserToNameResolver<TParent>;
      email?: UserToEmailResolver<TParent>;
      token?: UserToTokenResolver<TParent>;
      type?: UserToTypeResolver<TParent>;
    }
    
    export interface UserToIdResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface UserToNameResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface UserToEmailResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface UserToTokenResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface UserToTypeResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface MutationTypeResolver<TParent = any> {
      _empty?: MutationTo_emptyResolver<TParent>;
      createGame?: MutationToCreateGameResolver<TParent>;
      joinGame?: MutationToJoinGameResolver<TParent>;
      registerUser?: MutationToRegisterUserResolver<TParent>;
      makeMove?: MutationToMakeMoveResolver<TParent>;
    }
    
    export interface MutationTo_emptyResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface MutationToCreateGameArgs {
      input: InputCreateGame;
    }
    export interface MutationToCreateGameResolver<TParent = any, TResult = any> {
      (parent: TParent, args: MutationToCreateGameArgs, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface MutationToJoinGameArgs {
      input: InputJoinGame;
    }
    export interface MutationToJoinGameResolver<TParent = any, TResult = any> {
      (parent: TParent, args: MutationToJoinGameArgs, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface MutationToRegisterUserArgs {
      input: InputRegisterUser;
    }
    export interface MutationToRegisterUserResolver<TParent = any, TResult = any> {
      (parent: TParent, args: MutationToRegisterUserArgs, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface MutationToMakeMoveArgs {
      input: InputMakeMove;
    }
    export interface MutationToMakeMoveResolver<TParent = any, TResult = any> {
      (parent: TParent, args: MutationToMakeMoveArgs, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface SubscriptionTypeResolver<TParent = any> {
      _empty?: SubscriptionTo_emptyResolver<TParent>;
      liveResult?: SubscriptionToLiveResultResolver<TParent>;
    }
    
    export interface SubscriptionTo_emptyResolver<TParent = any, TResult = any> {
      resolve?: (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo) => TResult;
      subscribe: (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo) => AsyncIterator<TResult>;
    }
    
    export interface SubscriptionToLiveResultResolver<TParent = any, TResult = any> {
      resolve?: (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo) => TResult;
      subscribe: (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo) => AsyncIterator<TResult>;
    }
    
    export interface GameResultTypeResolver<TParent = any> {
      id?: GameResultToIdResolver<TParent>;
      player1Id?: GameResultToPlayer1IdResolver<TParent>;
      player2Id?: GameResultToPlayer2IdResolver<TParent>;
      status?: GameResultToStatusResolver<TParent>;
      player1Fields?: GameResultToPlayer1FieldsResolver<TParent>;
      player2Fields?: GameResultToPlayer2FieldsResolver<TParent>;
      emptyFields?: GameResultToEmptyFieldsResolver<TParent>;
    }
    
    export interface GameResultToIdResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface GameResultToPlayer1IdResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface GameResultToPlayer2IdResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface GameResultToStatusResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface GameResultToPlayer1FieldsResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface GameResultToPlayer2FieldsResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface GameResultToEmptyFieldsResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
  }
}