{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/auth/index.ts","webpack:///./src/db/index.ts","webpack:///./src/graphql/index.ts","webpack:///./src/graphql/schemaShards/games.ts","webpack:///./src/graphql/schemaShards/index.ts","webpack:///./src/graphql/schemaShards/moves.ts","webpack:///./src/graphql/schemaShards/users.ts","webpack:///./src/graphql/subscriptionManager.ts","webpack:///./src/graphql/utils/mergeRawSchemas.ts","webpack:///./src/helper/minmax.ts","webpack:///./src/index.ts","webpack:///./src/lib/TicTacToeGame.ts","webpack:///./src/lib/index.ts","webpack:///./src/services/TicTacToeGameService.ts","webpack:///./src/services/UserService.ts","webpack:///./src/services/index.ts","webpack:///external \"apollo-server\"","webpack:///external \"bcrypt\"","webpack:///external \"graphql-subscriptions\"","webpack:///external \"graphql-tools\"","webpack:///external \"jsonwebtoken\"","webpack:///external \"lodash\"","webpack:///external \"lowdb\"","webpack:///external \"lowdb/adapters/FileSync\"","webpack:///external \"uuid\""],"names":[],"mappings":"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","file":"server.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = \"./src/index.ts\");\n","import { getUserByToken } from 'src/db';\nimport { Request, Response } from 'express';\n\n// our context interface\nexport interface IContext {\n  token?: string;\n}\n\n// handle all of the token magic here\nfunction createContext(token: string): Promise<IContext> | IContext {\n  return {\n    token,\n  };\n}\n\n// create context for requests\nexport function handleGraphQLContext(ctx: {connection?: any, req?: Request, res?: Response}) {\n  const { req, connection } = ctx;\n    // we already connected with a subscription\n  if (connection) {\n    return connection.context;\n  }\n  // check the request for the token\n  const token = req.headers && req.headers.token;\n  return createContext(token as string);\n}\n\n// handle authentication for socket connections\nexport function handleGraphQLSubscriptionContext(\n    connectionParams: {authToken: string},\n    webSocket: WebSocket,\n) {\n  const token = connectionParams.authToken;\n  return createContext(token);\n}\n\n// check if the user is logged in or whatever you want to do to authenticate the user\nexport async function authenticateContext(context: IContext): Promise<GQL.User> {\n  if (!context.token) {\n        // too bad 👎\n    throw new Error('user is not logged in');\n  }\n  const user = await getUserByToken(context.token);\n  if (!user) {\n        // too bad 👎\n    throw new Error('invalid token');\n  }\n    // yay 👍\n  return user;\n}\n","import * as _ from 'lodash';\nimport * as lowdb from 'lowdb';\nimport * as FileSync from 'lowdb/adapters/FileSync';\nimport * as jsonwebtoken from 'jsonwebtoken';\nimport * as bcrypt from 'bcrypt';\nimport { v4 as createUUID } from 'uuid';\n\nimport { IGame, TicTacToeGame } from '../lib';\n\n/*\n* NOTICE! these secrets are here for simplicity,\n* please don't save secrets inside your code,\n* but in environment variables or config files that will not be in the repository\n*\n* this entire file is only to mock a local database. it is not ment to act as a real database.\n*/\n// some salt for hashing the password\nconst hashSalt = '$2a$10$7h/0SQ4FXRG5eX3602o3/.aO.RYkxKuhGkzvIXHLUiMJlFt1P.6Pe';\n// a secret for signing with jwt\nconst jwtSecret = 'oCDSF$#%$#%dfsvdgfd#@$3f';\n\n// our database\nconst adapter = new FileSync('db.json');\nconst db = lowdb(adapter);\n\ndb.defaults({\n  users: [],\n  games: [],\n  moves: [],\n}).write();\n\nconst ticTacToeGame: IGame = new TicTacToeGame();\n\n// get a user's public data by it's id.\nexport async function getPublicUser(id: string): Promise<GQL.PublicUser> {\n  const user = db.get('users')\n        .find({ id })\n        .value();\n  return user;\n}\n\n// gets a user by it's password and email.\nexport async function getUserByPasswordAndEmail(input: GQL.InputLogin): Promise<GQL.User> {\n  const { password, email } = input;\n  const hash = bcrypt.hashSync(password, hashSalt);\n  const user = db.get('users')\n        .find({ email, password: hash })\n        .value();\n  return user;\n}\n\n// get a user by it's token\nexport async function getUserByToken(token: string): Promise<GQL.User> {\n  const user = db.get('users')\n        .find({ token })\n        .value();\n  return user;\n}\n\nexport async function registerUser(userInput: GQL.InputLogin): Promise<GQL.User> {\n  const { email, password } = userInput;\n  const existingUser = db\n        .get('users')\n        .find({ email })\n        .value();\n\n  if (existingUser) {\n    throw new Error('user already exist');\n  }\n\n  const id = createUUID();\n  const hash = bcrypt.hashSync(password, hashSalt);\n  const token = jsonwebtoken.sign(\n        { id },\n        jwtSecret,\n    );\n\n  const user = {\n    ...userInput,\n    id,\n    token,\n    password: hash,\n    type: GQL.UserType.REAL,\n  };\n\n  db.get('users')\n        .push(user)\n        .write();\n  return user;\n}\n\nexport async function createAIUser(): Promise<GQL.PublicUser> {\n\n  const user = {\n    id: createUUID(),\n    name: 'COMPUTER',\n    type: GQL.UserType.COMPUTER,\n  };\n\n  db.get('users')\n        .push(user)\n        .write();\n\n  return user;\n}\n\n// get all games\nexport async function getGames(): Promise<GQL.Game[]> {\n  return db.get('games')\n        .value();\n}\n\n// get a game by Id\nexport async function getGameById(id: string): Promise<GQL.Game> {\n  const game = db.get('games')\n        .find({ id })\n        .value();\n  return game;\n}\n\n// create a new game\nexport async function createGame(\n  inputCreateGame: GQL.InputCreateGame,\n): Promise<Partial<GQL.Game>> {\n\n  const game = {\n    ...inputCreateGame,\n    id: createUUID(),\n    timestamp: new Date().toUTCString(),\n    status: GQL.GameStatus.NOTSTARTED,\n  };\n\n  db.get('games')\n    .push(game)\n    .write();\n\n  return game;\n}\n\n// join game\nexport async function joinGame(\n  inputJoinGame: GQL.InputJoinGame,\n): Promise<Partial<GQL.Game>> {\n\n  const gameId: string = _.get(inputJoinGame, 'gameId');\n  const player2Id: string = _.get(inputJoinGame, 'player2Id');\n\n  const game: Partial<GQL.Game> = await getGameById(gameId);\n\n  return db.get('games')\n    .find({ id: gameId })\n    .assign(\n    {\n      nextTurnPlayerId: _.get(game, 'player1Id'),\n      player2Id,\n      emptyFields: [...Array(9).keys()].map(i => i),\n      status: GQL.GameStatus.INPLAY,\n    },\n    )\n    .write();\n}\n\n// make Move\nexport async function makeMove(\n  inputMakeMove: GQL.InputMakeMove,\n): Promise<Partial<GQL.Move>> {\n\n  const gameId: string = _.get(inputMakeMove, 'gameId');\n  const playerId: string = _.get(inputMakeMove, 'playerId');\n  const field: number = _.get(inputMakeMove, 'field');\n\n  const move: GQL.Move = {\n    ...inputMakeMove,\n    timestamp: new Date().toUTCString(),\n  };\n\n  db.get('moves')\n        .push(move)\n        .write();\n\n  const game: Partial<GQL.Game> = db.get('games')\n    .find({ id: gameId })\n    .value();\n\n  console.log('PlayerId ' + playerId);\n\n  const emptyFields: number[] = _.get(game, 'emptyFields');\n\n  if (_.get(game, 'player1Id') === playerId) {\n    const playerFields: number[] = _.concat(_.get(game, 'player1Fields') || [], field);\n\n    const winner = ticTacToeGame.checkWinner(playerFields);\n\n    let gameAttributes: any;\n\n    if (winner) {\n      gameAttributes = {\n        winnerId: playerId,\n        status: GQL.GameStatus.FINISHED_WIN,\n        nextTurnPlayerId: null,\n      };\n    } else {\n      gameAttributes = {\n        nextTurnPlayerId: _.get(game, 'player2Id'),\n      };\n    }\n\n    db.get('games')\n    .find({ id: gameId })\n    .assign(\n      {\n        player1Fields: _.uniq(playerFields),\n        emptyFields: _.difference(emptyFields, [field]),\n        ...gameAttributes,\n      },\n    ).write();\n  }\n\n  if (_.get(game, 'player2Id') === playerId) {\n    const playerFields: number[] = _.concat(_.get(game, 'player2Fields') || [], field);\n\n    const winner = ticTacToeGame.checkWinner(playerFields);\n\n    let gameAttributes: any;\n\n    if (winner) {\n      gameAttributes = {\n        winnerId: playerId,\n        status: GQL.GameStatus.FINISHED_WIN,\n        nextTurnPlayerId: null,\n      };\n    } else {\n      gameAttributes = {\n        nextTurnPlayerId: _.get(game, 'player1Id'),\n      };\n    }\n\n    db.get('games')\n    .find({ id: gameId })\n    .assign(\n      {\n        player2Fields: _.uniq(playerFields),\n        emptyFields: _.difference(emptyFields, [field]),\n        ...gameAttributes,\n      },\n    ).write();\n  }\n\n  return move;\n}\n\nexport async function getMovesForGame(gameId: string): Promise<Partial<GQL.Move[]>> {\n\n  const moves = db.get('moves')\n    .filter({ gameId })\n    .value();\n\n  return moves;\n\n}\n","import { mergeRawSchemas } from './utils/mergeRawSchemas';\nimport { gql } from 'apollo-server';\nimport schemaShards from './schemaShards';\n\nexport const rawSchema = mergeRawSchemas(\n  {\n    typeDefs: [\n      // we create empty main types, we can later extend them in the shards\n      gql`\n                 type Query {\n                    _empty: String\n                }\n\n                type Mutation {\n                    _empty: String\n                }\n\n                type Subscription {\n                    _empty: String\n                }\n            `,\n    ],\n    resolvers: {},\n  },\n  schemaShards,\n);\n","import {\n  IGameService,\n  IUserService,\n  TicTacToeGameService,\n  UserService,\n} from '../../services';\n\nimport { gql } from 'apollo-server';\nimport { pubsub } from 'src/graphql/subscriptionManager';\nimport { authenticateContext } from 'src/auth';\n\nconst ticTAcToeGameService: IGameService = new TicTacToeGameService();\nconst userService: IUserService = new UserService();\n\nconst typeDefs = gql`\n    enum GameType {\n      SINGLEPLAYER\n      MULTIPLAYER\n    }\n\n    enum GameStatus {\n        NOTSTARTED\n        INPLAY\n        FINISHED_TIE\n        FINISHED_WIN\n    }\n\n    extend type Query {\n        \" get all games\"\n        getGames: [Game]\n        \" get game by ID \"\n        game(id: ID!): Game\n    }\n\n    extend type Mutation {\n        \" create a new game \"\n        createGame(input: InputCreateGame!): Game\n        \" join game\"\n        joinGame(input: InputJoinGame!): Game\n    }\n\n    extend type Subscription {\n        \" called when a move is made \"\n        liveResult: Game\n    }\n\n    \" input to create a new game \"\n    input InputCreateGame {\n        gameType: GameType\n        player1Id: ID\n    }\n\n    \" input to join game \"\n    input InputJoinGame {\n        gameId: ID\n        player2Id: ID\n    }\n\n    type Game {\n        id: ID,\n        player1Id: ID\n        player2Id: ID\n        nextTurnPlayerId: ID\n        winnerId: ID\n        Player1: PublicUser\n        Player2: PublicUser\n        NextTurnPlayer: PublicUser\n        Winner: PublicUser\n        status: GameStatus\n        type: GameType\n        Moves: [Move]\n        player1Fields: [Int]\n        player2Fields: [Int]\n        emptyFields: [Int]\n        timestamp: String\n    }\n\n    type GameResult {\n        id: ID\n        player1Id: ID\n        player2Id: ID\n        status: GameStatus\n        player1Fields: [Int]\n        player2Fields: [Int]\n        emptyFields: [Int]\n    }\n\n`;\n\nexport default {\n  resolvers: {\n    Query: {\n        // get games\n      getGames: async () => await ticTAcToeGameService.getGames(),\n        // get game by ID\n      game: async (root, { id }:  GQL.QueryToGameArgs) => await ticTAcToeGameService.getGameById(id),\n    },\n    Mutation: {\n      // create a game\n      createGame:  async (root, { input } : GQL.MutationToCreateGameArgs, context) => {\n        let game: Partial<GQL.Game> = await ticTAcToeGameService.createGame(input);\n\n        if (game.type === GQL.GameType.SINGLEPLAYER) {\n\n          const user: Partial<GQL.PublicUser> = await userService.createAIUser();\n\n          game = await ticTAcToeGameService.joinGame({\n            gameId: game.id,\n            player2Id: user.id,\n          });\n\n        }\n\n        return game;\n      },\n      // join game\n      joinGame: async (root, { input } : GQL.MutationToJoinGameArgs, context) => {\n        const game: Partial<GQL.Game> = await ticTAcToeGameService.joinGame(input);\n\n        return game;\n      },\n    },\n    Subscription: {\n      liveResult: {\n        subscribe: (root, args, context) => {\n          return pubsub.asyncIterator('liveResult');\n        },\n      },\n    },\n    Game: {\n      Player1: async (game: any) => await userService.getPublicUser(game.player1Id),\n      Player2: async (game: any) => await userService.getPublicUser(game.player2Id),\n      Moves: async (game: any) => await ticTAcToeGameService.getMovesForGames(game.id),\n    },\n  },\n  typeDefs: [typeDefs],\n};\n","/**\n * This file merges all of the schemas that belong to different parts of the shards\n */\nimport games from 'src/graphql/schemaShards/games';\nimport moves from 'src/graphql/schemaShards/moves';\nimport users from 'src/graphql/schemaShards/users';\nimport { mergeRawSchemas } from 'src/graphql/utils/mergeRawSchemas';\n\nexport default mergeRawSchemas(\n    games,\n    users,\n    moves,\n);\n","import * as _ from 'lodash';\nimport { gql } from 'apollo-server';\nimport { pubsub } from 'src/graphql/subscriptionManager';\nimport { authenticateContext } from 'src/auth';\n\nimport { IGameService, TicTacToeGameService } from '../../services';\n\nconst ticTacToeGameService: IGameService = new TicTacToeGameService();\n\nconst typeDefs = gql`\n    extend type Mutation {\n        \" create a new post \"\n        makeMove(input: InputMakeMove!): Move\n    }\n\n    \" input to create a move \"\n    input InputMakeMove {\n        gameId: ID\n        playerId: ID\n        field: Int\n    }\n\n    type Move {\n        id: ID\n        gameId: ID\n        playerId: ID\n        field: Int\n        Player: PublicUser\n        timestamp: String\n    }\n`;\n\nexport default {\n  resolvers: {\n    Mutation: {\n      // create a post\n      makeMove:  async (root, { input }: GQL.MutationToMakeMoveArgs, context) => {\n        // get the user from the context\n        await authenticateContext(context);\n\n        // publish the post to the subscribers\n        let game: Partial<GQL.Game> = await ticTacToeGameService.getGameById(input.gameId);\n\n        if (game.status !== GQL.GameStatus.INPLAY || !_.includes(game.emptyFields, input.field)) {\n          throw new Error('You cannot play that field.');\n        }\n\n        if (game.nextTurnPlayerId !== input.playerId) {\n          throw new Error('This is not your move.');\n        }\n\n        // create a new post in the database\n        const move: Partial<GQL.Move> = await ticTacToeGameService.makeMove(input);\n\n        pubsub.publish('liveResult', {\n          liveResult: game,\n        });\n\n        if (game.status !== GQL.GameStatus.INPLAY && game.type !== GQL.GameType.SINGLEPLAYER) {\n\n          const computerInput: GQL.InputMakeMove = {\n            playerId: game.player2Id,\n            gameId: input.gameId,\n          };\n\n          await ticTacToeGameService.makeAIMove(computerInput);\n\n          game = await ticTacToeGameService.getGameById(input.gameId);\n\n          pubsub.publish('liveResult', {\n            liveResult: game,\n          });\n\n        }\n\n        return move;\n      },\n    },\n  },\n  typeDefs: [typeDefs],\n};\n","import { gql } from 'apollo-server';\n\nimport { IUserService, UserService } from '../../services';\n\nconst userService: IUserService = new UserService();\n\nconst typeDefs = gql`\n    enum UserType {\n        REAL\n        COMPUTER\n    }\n\n    extend type Query {\n        \" login as a user \"\n        loginUser(input: InputLogin!): User\n        \" get a user's public data\"\n        getUser(id: ID!): PublicUser\n    }\n\n    extend type Mutation {\n        \" register a new user \"\n        registerUser(input: InputRegisterUser!): User\n    }\n\n    \" used for logging in \"\n    input InputLogin {\n        email: String!\n        password: String!\n    }\n\n    \" used for creating a new user \"\n    input InputRegisterUser {\n        name: String!\n        email: String!\n        password: String!\n    }\n\n    \" a type defining a user's public data \"\n    type PublicUser {\n        id: ID\n        name: String\n        email: String\n        type: UserType\n    }\n\n    \" a type defining a user  \"\n    type User {\n        id: ID\n        name: String\n        email: String\n        token: String\n        type: UserType\n    }\n`;\n\nexport default {\n  resolvers: {\n    Query: {\n      // login\n      loginUser: async (root, { input }: GQL.QueryToLoginUserArgs) => await userService.getUserByPasswordAndEmail(input),\n      // get a user\n      getUser: async (root, { id }:  GQL.QueryToGetUserArgs) => await userService.getPublicUser(id),\n    },\n    Mutation: {\n      // register\n      registerUser: async (root, { input }: GQL.MutationToRegisterUserArgs) => await userService.registerUser(input),\n    },\n  },\n  typeDefs: [typeDefs],\n};\n","import { PubSub } from 'graphql-subscriptions';\n\n// In a production server you might want to have some message broker or pubsub implementation like\n// rabbitMQ, redis or kafka logic here\n// you can use one of the graphql subscription implementations to do it easily\n//\n// Redis: https://github.com/davidyaha/graphql-redis-subscriptions\n// Kafka: https://github.com/ancashoria/graphql-kafka-subscriptions\n// Rabbitmq: https://github.com/cdmbase/graphql-rabbitmq-subscriptions\n\nexport const pubsub = new PubSub();\n","import * as _ from 'lodash';\nimport { IExecutableSchemaDefinition } from 'apollo-server';\n\nfunction withArraysConcatination(objValue, srcValue) {\n  // if an array, concat it\n  if (_.isArray(objValue)) {\n    return objValue.concat(srcValue);\n  }\n  // use the normal lodash merge functionality\n}\n\n// allows us to merge schemas\nexport const mergeRawSchemas = (...schemas: IExecutableSchemaDefinition[]):\n    IExecutableSchemaDefinition => {\n  return _.mergeWith({}, ...schemas, withArraysConcatination);\n};\n","import * as _ from 'lodash';\nimport { forEachField } from 'graphql-tools';\n\ntype Move = {\n  score?: any,\n  index?: any,\n};\n\nconst origBoard = Array.from(Array(9).keys()); // an array that keeps track of what's in each square: X, O or nothing\nconst humanPlayer = 'O';\nconst aiPlayer = 'X';\nconst winCombos = [  // array thats gonna show winning combinations\n    [0, 1, 2],\n    [3, 4, 5],\n    [6, 7, 8],\n\n    [0, 3, 6],\n    [1, 4, 7],\n    [2, 5, 8],\n\n    [0, 4, 8],\n    [6, 4, 2],\n];\n\n// defining checkWin function\nfunction checkWin(board, player) {\n  const plays = board.reduce((a, e, i) =>\n  (e === player) ? a.concat(i) : a, []); // finding every index that the player has played\n  let gameWon = null;\n  for (const [index, win] of winCombos.entries()) { // checking if the game has been won by looping through every winCombos\n    if (win.every(elem => plays.indexOf(elem) > -1)) { // has the player played in every spot that counts as a win for that win\n      gameWon = { index, player };  // which win combo the player won at & which player had won\n      break;\n    }\n  }\n  return gameWon;\n}\n\n// defining emptySuares function\nfunction emptySquares() {\n  return origBoard.filter(s => typeof s === 'number'); // filter every element in the origBoard to see if the type of element equals number. If yes, we are gonna return it (all the squares that are numbers are empty, the squares with X and O are not empty)\n}\n\n// defining bestSpot function\nexport function bestSpot(humanPlayerFields: number[], aiPlayerFields: number[]): number {\n\n  _.each(humanPlayerFields, (field: number) => {\n    _.set(origBoard, field.toString(), humanPlayer);\n  });\n\n  _.each(aiPlayerFields, (field: number) => {\n    _.set(origBoard, field.toString(), aiPlayer);\n  });\n\n  const res: any = minimax(origBoard, aiPlayer); // will always play in the first empty squre\n\n  return res.index;\n}\n\n// defining minimax function\nfunction minimax(newBoard, player): Move {\n\n  const availSpots = emptySquares(); // defining the indexes of the available spots in the board\n\n  if (checkWin(newBoard, player)) { // checking who wins\n    return { score: -10 }; // if O wins we return -10\n  }  if (checkWin(newBoard, aiPlayer)) {\n    return { score: 10 }; // if X wins we return 10\n  }  if (availSpots.length === 0) {\n    return { score: 0 }; // tie, we return 0\n  }\n\n  const moves: Move[] = []; // collect the scores from each of the empty spots to evaluate them later\n  for (let i = 0; i < availSpots.length; i++) {\n    const move: Move = {};\n    _.set(move, 'index', newBoard[availSpots[i]]); // setting the index number of the empty spot, that was store as a number in the origBoard, to the index property of the move object\n    newBoard[availSpots[i]] = player; // setting empty spot on a newBoard to the current player\n    if (player === aiPlayer) { // calling the minimax function with the other player in the newly changed newBoard\n      const result = minimax(newBoard, humanPlayer);\n      _.set(move, 'score', result.score); // store the object result from the minimax function call, that includes a score property, to the score property of the move object\n    } else {\n      const result = minimax(newBoard, aiPlayer);\n      _.set(move, 'score', result.score); // if the minimax function does not find a terminal state, it goes level by level (deeper into the game). this recursion happens until it reached out the terminal state and returns a score one level up\n    }\n\n    newBoard[availSpots[i]] = _.get(move, 'index'); // minimax resets newBoard to what it was before\n\n    moves.push(move); // pushes the move object to the moves array\n  }\n\n  let bestMove; // minimax algorithm evaluates the best move in the moves array\n  if (player === aiPlayer) {  // choosing the highest score when AI is playing and the lowest score when the human is playing\n    let bestScore = -10000; // if the player is AI player, it sets variable bestScore to a very low number\n    for (let i = 0; i < moves.length; i++) { // looping through the moves array\n      if (moves[i].score > bestScore) { // if a move has a higher score than the bestScore, the algorithm stores that move\n        bestScore = moves[i].score;\n        bestMove = i; // if there are moves with similar scores, only the first will be stored\n      }\n    }\n  } else { // when human Player\n    let bestScore = 10000;\n    for (let i = 0; i < moves.length; i++) {\n      if (moves[i].score < bestScore) { // minimax looks for a move with the lowest score to store\n        bestScore = moves[i].score;\n        bestMove = i;\n      }\n    }\n  }\n\n  return moves[bestMove]; // returning object stored in bestMove\n}\n","import { ApolloServer, Config } from 'apollo-server';\nimport { makeExecutableSchema } from 'graphql-tools';\nimport { handleGraphQLContext, handleGraphQLSubscriptionContext } from 'src/auth/index';\nimport { rawSchema } from './graphql';\n\nconst port = process.env.PORT || 4000;\n\n// create our schema\nconst schema = makeExecutableSchema(rawSchema);\n\n// configure the server here\nconst serverConfig: Config = {\n  schema,\n  context: handleGraphQLContext,\n  subscriptions: {\n    onConnect: handleGraphQLSubscriptionContext as any,\n  },\n  playground: {\n    settings: {\n      'editor.theme': 'dark', // change to light if you prefer\n      'editor.cursorShape': 'line', // possible values: 'line', 'block', 'underline'\n    },\n  },\n};\n\n// create a new server\nconst server = new ApolloServer(serverConfig);\nserver.listen(port).then(({ url }) => {\n  console.log(`🚀  Server ready at ${url}`);\n});\n","import * as _ from 'lodash';\n\nimport { IGame } from './interfaces/IGame';\n\nimport { bestSpot } from '../helper/minmax';\n\nclass TicTacToeGame implements IGame {\n\n  private static WINNER_COMBINATIONS: number[][] = [\n        [0, 1, 2],\n        [3, 4, 5],\n        [6, 7, 8],\n        [0, 3, 6],\n        [1, 4, 7],\n        [2, 5, 8],\n        [0, 4, 8],\n        [6, 4, 2],\n  ];\n\n  public checkWinner(playerFields: number[]): boolean {\n\n        // playerFields\n    let winner: boolean = false;\n\n    _.each(TicTacToeGame.WINNER_COMBINATIONS, (combination: number[]) => {\n\n      const intersection: number[] = _.intersection(playerFields, combination);\n\n      if (intersection.length === 3) {\n        winner = true;\n      }\n\n    });\n\n    return winner;\n  }\n\n  public checkTie(game: GQL.Game): boolean {\n\n    return !this.checkWinner(_.get(game, 'player1Fields')) &&\n            !this.checkWinner(_.get(game, 'player2Fields')) &&\n            _.isEmpty(_.get(game, 'emptyFields'));\n  }\n\n  public AIMove(game: GQL.Game): number {\n\n    const move: number = bestSpot(game.player1Fields, game.player2Fields);\n    return move;\n  }\n\n}\n\nexport { TicTacToeGame };\n","export { IGame } from './interfaces/IGame';\n\nexport { TicTacToeGame } from './TicTacToeGame';\n","import {\n    getGames,\n    getGameById,\n    createGame,\n    joinGame,\n    makeMove,\n    getMovesForGame,\n} from '../db';\n\nimport { IGame, TicTacToeGame } from '../lib';\nimport { IGameService } from './interfaces/IGameService';\n\nclass TicTacToeGameService implements IGameService {\n\n  public async getGames(): Promise<Partial<GQL.Game>[]> {\n    return getGames();\n  }\n\n  public async getGameById(id: string): Promise<Partial<GQL.Game>> {\n    return getGameById(id);\n  }\n\n  public async createGame(inputCreateGame: GQL.InputCreateGame): Promise<Partial<GQL.Game>> {\n    return createGame(inputCreateGame);\n  }\n\n  public async joinGame(inputJoinGame: GQL.InputJoinGame): Promise<Partial<GQL.Game>> {\n    return joinGame(inputJoinGame);\n  }\n\n  public async makeMove(inputMakeMove: GQL.InputMakeMove): Promise<Partial<GQL.Move>> {\n    return makeMove(inputMakeMove);\n  }\n\n  public async makeAIMove(inputAIMakeMove: GQL.InputMakeMove): Promise<Partial<GQL.Move>> {\n\n    const game: Partial<GQL.Game> = await this.getGameById(inputAIMakeMove.gameId);\n    const ticTacToeGame: IGame = new TicTacToeGame();\n    const field: number = ticTacToeGame.AIMove(game);\n\n    inputAIMakeMove.field = field;\n\n    return makeMove(inputAIMakeMove);\n  }\n\n  public async getMovesForGames(gameId: string): Promise<Partial<GQL.Move>[]> {\n\n    const moves = await getMovesForGame(gameId);\n\n    console.log('GameId ' + JSON.stringify(gameId));\n\n    console.log('Moves ' + JSON.stringify(moves));\n\n    return moves;\n  }\n\n}\n\nexport { TicTacToeGameService };\n","import {\n    registerUser,\n    getPublicUser,\n    getUserByPasswordAndEmail,\n    getUserByToken,\n    createAIUser,\n} from '../db';\n\nimport { IUserService } from './interfaces/IUserService';\n\nclass UserService implements IUserService {\n\n  public async registerUser(userInput: GQL.InputLogin): Promise<GQL.User> {\n    return registerUser(userInput);\n  }\n\n  public async getPublicUser(id: string): Promise<GQL.PublicUser> {\n    return getPublicUser(id);\n  }\n\n  public async getUserByPasswordAndEmail(input: GQL.InputLogin): Promise<GQL.User> {\n    return getUserByPasswordAndEmail(input);\n  }\n\n  public async getUserByToken(token: string): Promise<GQL.User> {\n    return getUserByToken(token);\n  }\n\n  public async createAIUser(): Promise<GQL.PublicUser> {\n    return createAIUser();\n  }\n\n}\n\nexport { UserService };\n","export { IGameService } from './interfaces/IGameService';\nexport { IUserService } from './interfaces/IUserService';\n\nexport { TicTacToeGameService } from './TicTacToeGameService';\nexport { UserService } from './UserService';\n","module.exports = require(\"apollo-server\");","module.exports = require(\"bcrypt\");","module.exports = require(\"graphql-subscriptions\");","module.exports = require(\"graphql-tools\");","module.exports = require(\"jsonwebtoken\");","module.exports = require(\"lodash\");","module.exports = require(\"lowdb\");","module.exports = require(\"lowdb/adapters/FileSync\");","module.exports = require(\"uuid\");"],"sourceRoot":""}